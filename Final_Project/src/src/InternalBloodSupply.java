
import java.awt.Color;
import java.awt.Component;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author User
 */
public class InternalBloodSupply extends javax.swing.JFrame {

    /**
     * Creates new form DonerDetails
     */
    String Supamount; 
    String Status;
    public InternalBloodSupply() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneladd = new javax.swing.JPanel();
        lblreqid = new javax.swing.JLabel();
        txtreqid = new javax.swing.JTextField();
        lblsupdate = new javax.swing.JLabel();
        lblreqbamount = new javax.swing.JLabel();
        lblblgroup = new javax.swing.JLabel();
        txtsupdate = new com.toedter.calendar.JDateChooser();
        btnadd = new javax.swing.JButton();
        btnclear = new javax.swing.JButton();
        lblnewDoner = new javax.swing.JLabel();
        lblsupid = new javax.swing.JLabel();
        txtsupid = new javax.swing.JTextField();
        cbsupbamount = new javax.swing.JComboBox<>();
        lblsupbamount = new javax.swing.JLabel();
        lblstatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtBgroup = new javax.swing.JTextField();
        txtreqamount = new javax.swing.JTextField();
        status = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        bloodsupplymenu = new javax.swing.JMenu();
        internalsupply = new javax.swing.JMenu();
        externalsupply = new javax.swing.JMenu();
        allsupplymenu = new javax.swing.JMenu();
        Internalsupply = new javax.swing.JMenu();
        Externalsupply = new javax.swing.JMenu();
        backmenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        paneladd.setBackground(new java.awt.Color(0,0,0,30));

        lblreqid.setBackground(new java.awt.Color(255, 255, 255));
        lblreqid.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lblreqid.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblreqid.setText("REQUEST ID");
        lblreqid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));

        txtreqid.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        txtreqid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));
        txtreqid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtreqidKeyPressed(evt);
            }
        });

        lblsupdate.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lblsupdate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblsupdate.setText("DATE");
        lblsupdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));

        lblreqbamount.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lblreqbamount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblreqbamount.setText("REQUESTED QUANTITY");
        lblreqbamount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));

        lblblgroup.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lblblgroup.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblblgroup.setText("BLOOD GROUP");
        lblblgroup.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));

        txtsupdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));
        txtsupdate.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N

        btnadd.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        btnadd.setText("ADD");
        btnadd.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 255, 255), 3, true));
        btnadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddActionPerformed(evt);
            }
        });

        btnclear.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        btnclear.setText("CLEAR");
        btnclear.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 255, 255), 3, true));

        lblnewDoner.setFont(new java.awt.Font("Serif", 1, 36)); // NOI18N
        lblnewDoner.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblnewDoner.setText("Add Supply Details");

        lblsupid.setBackground(new java.awt.Color(255, 255, 255));
        lblsupid.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lblsupid.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblsupid.setText("SUPPLY ID");
        lblsupid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));

        txtsupid.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        txtsupid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));
        txtsupid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtsupidKeyPressed(evt);
            }
        });

        cbsupbamount.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        cbsupbamount.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<<Select Blood Amount>>", "1", "2", "3", "4", "5", "6", "7", "8", "9", " " }));
        cbsupbamount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));
        cbsupbamount.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbsupbamountItemStateChanged(evt);
            }
        });

        lblsupbamount.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lblsupbamount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblsupbamount.setText("SUPPLIEDED QUANTITY");
        lblsupbamount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));

        lblstatus.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lblstatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblstatus.setText("STATUS");
        lblstatus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jTable1.setFont(new java.awt.Font("PMingLiU-ExtB", 1, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Supplied ID", "Request ID", "Blood Group", "Requested Amount", "Supplied Amount", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(30);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        txtBgroup.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        txtBgroup.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));
        txtBgroup.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBgroupKeyPressed(evt);
            }
        });

        txtreqamount.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        txtreqamount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));
        txtreqamount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtreqamountKeyPressed(evt);
            }
        });

        status.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<<Add Status>>", "Fully Supplied", "Suppy,Not Completely", " " }));
        status.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 255), 2));
        status.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                statusItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout paneladdLayout = new javax.swing.GroupLayout(paneladd);
        paneladd.setLayout(paneladdLayout);
        paneladdLayout.setHorizontalGroup(
            paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneladdLayout.createSequentialGroup()
                .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneladdLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnadd, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(paneladdLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblreqid, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblsupid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblblgroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(paneladdLayout.createSequentialGroup()
                                .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblstatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblsupdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblsupbamount, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                    .addComponent(lblreqbamount, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 4, Short.MAX_VALUE)))))
                .addGap(18, 20, Short.MAX_VALUE)
                .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbsupbamount, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtsupid, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtreqid, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtBgroup, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneladdLayout.createSequentialGroup()
                        .addComponent(btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77))
                    .addComponent(txtreqamount, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtsupdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(status, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneladdLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(lblnewDoner, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(paneladdLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 676, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        paneladdLayout.setVerticalGroup(
            paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneladdLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(paneladdLayout.createSequentialGroup()
                        .addComponent(lblnewDoner, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblsupid)
                            .addComponent(txtsupid, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblreqid)
                            .addComponent(txtreqid, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblblgroup, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBgroup, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtreqamount, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblreqbamount, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbsupbamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblsupbamount, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtsupdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblsupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(paneladdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnadd, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        getContentPane().add(paneladd, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 1160, 460));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/bg2.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1616, 719));

        bloodsupplymenu.setBackground(new java.awt.Color(255, 51, 51));
        bloodsupplymenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Donor.png"))); // NOI18N
        bloodsupplymenu.setText("Supply Details  ");
        bloodsupplymenu.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        bloodsupplymenu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bloodsupplymenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bloodsupplymenuMouseClicked(evt);
            }
        });

        internalsupply.setBackground(new java.awt.Color(255, 51, 51));
        internalsupply.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Donor.png"))); // NOI18N
        internalsupply.setText("Internal Supply  ");
        internalsupply.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        internalsupply.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        internalsupply.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                internalsupplyMouseClicked(evt);
            }
        });
        bloodsupplymenu.add(internalsupply);

        externalsupply.setBackground(new java.awt.Color(255, 51, 51));
        externalsupply.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Donor.png"))); // NOI18N
        externalsupply.setText("External Supply ");
        externalsupply.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        externalsupply.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        externalsupply.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                externalsupplyMouseClicked(evt);
            }
        });
        bloodsupplymenu.add(externalsupply);

        jMenuBar1.add(bloodsupplymenu);

        allsupplymenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/more.png"))); // NOI18N
        allsupplymenu.setText("All Supply Details          ");
        allsupplymenu.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        allsupplymenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allsupplymenuMouseClicked(evt);
            }
        });

        Internalsupply.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/more.png"))); // NOI18N
        Internalsupply.setText("Internal Supply Details          ");
        Internalsupply.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        Internalsupply.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InternalsupplyMouseClicked(evt);
            }
        });
        allsupplymenu.add(Internalsupply);

        Externalsupply.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/more.png"))); // NOI18N
        Externalsupply.setText("External Supply Details          ");
        Externalsupply.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        Externalsupply.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExternalsupplyMouseClicked(evt);
            }
        });
        allsupplymenu.add(Externalsupply);

        jMenuBar1.add(allsupplymenu);

        backmenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/exit.png"))); // NOI18N
        backmenu.setText("Back                                          ");
        backmenu.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        backmenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backmenuMouseClicked(evt);
            }
        });
        jMenuBar1.add(backmenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bloodsupplymenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bloodsupplymenuMouseClicked
      
    }//GEN-LAST:event_bloodsupplymenuMouseClicked

    private void backmenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backmenuMouseClicked
        Home frmNewForm = new Home();
        frmNewForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backmenuMouseClicked

    private void allsupplymenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allsupplymenuMouseClicked
       
    }//GEN-LAST:event_allsupplymenuMouseClicked

    private void internalsupplyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_internalsupplyMouseClicked
       
    }//GEN-LAST:event_internalsupplyMouseClicked

    private void externalsupplyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_externalsupplyMouseClicked
        ExternalBloodSupply frmNewForm = new ExternalBloodSupply ();
        frmNewForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_externalsupplyMouseClicked

    private void InternalsupplyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InternalsupplyMouseClicked
         AllInternalBloodSupplyDetails frmNewForm = new  AllInternalBloodSupplyDetails  ();
        frmNewForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_InternalsupplyMouseClicked

    private void ExternalsupplyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExternalsupplyMouseClicked
        AllExternalBloodSupplyDetails frmNewForm = new  AllExternalBloodSupplyDetails  ();
        frmNewForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ExternalsupplyMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       try
        {
         Class.forName("com.mysql.cj.jdbc.Driver");
         Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/bloodbank", "root", "");
         Statement st = con.createStatement();
        // String query ="select IRequestID,RDate,RBloodGroup,Quantity from internalrequests";
        String query =  "SELECT internalrequests.IRequestID, " +
                       "internalrequests.RBloodGroup, " +
                       "internalrequests.Quantity, " +
                        "IFNULL(internalsupply.ISupplyID, 'N/A') AS ISupplyID, " +
                       "IFNULL(internalsupply.SuppliedAmount, 'N/A') AS SuppliedAmount, " +
                       "IFNULL(internalsupply.Status, 'N/A') AS Status " +
                       "FROM internalrequests " +
                       "LEFT JOIN internalsupply ON internalrequests.IRequestID = internalsupply.IRequestID";
         
         
            java.sql.ResultSet rs = st.executeQuery(query);
           
            while(rs.next()){
                String ISID = rs.getString("ISupplyID");
                String IRID = rs.getString("IRequestID");
                String BloodGroup = rs.getString("RBloodGroup");
                String amount = rs.getString("Quantity");
                String Samount= rs.getString("SuppliedAmount");
                String Status= rs.getString("Status");

                String tbData[] = {ISID,IRID,BloodGroup,amount,Samount,Status};
                DefaultTableModel tblModel = (DefaultTableModel)jTable1.getModel();
                tblModel.addRow(tbData);
            }
                
        
        }
        catch(Exception ex)
        {
             JOptionPane.showMessageDialog(this, "errorr in table       " + ex);

        }  
       try
        {
         Class.forName("com.mysql.cj.jdbc.Driver");
         Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/bloodbank", "root", "");
         Statement st = con.createStatement();
         java.sql.ResultSet rs = st.executeQuery("select MAX(ISupplyID) from internalsupply");
         rs.next();
         rs.getString("MAX(ISupplyID)");
         
         if(rs.getString("MAX(ISupplyID)")==null)
         {
             txtsupid.setText("IS-0001");
         }
         else
         {
         int ID = Integer.parseInt(rs.getString("MAX(ISupplyID)").substring(3,rs.getString("MAX(ISupplyID)").length()));
         ID++;
         txtsupid.setText("IS-" + String.format("%04d", ID));
         }
          
         Map<String, Color> requestIDColors = ExternalBloodSupply.StatusColoring.determineStatusColors(jTable1);
            // Set the custom renderer
            jTable1.setDefaultRenderer(Object.class, new ExternalBloodSupply.StatusCellRenderer(requestIDColors));

        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Error in ISupplyID "+ex);
        }
    }//GEN-LAST:event_formWindowActivated
public static class StatusColoring {

        public static Map<String, Color> determineStatusColors(JTable table) {
            Map<String, Set<String>> requestIDStatusMap = new HashMap<>();

            // Collect statuses for each RequestID
            for (int row = 0; row < table.getRowCount(); row++) {
                String status = (String) table.getValueAt(row, 5); 
                String requestID = (String) table.getValueAt(row, 1); 

                requestIDStatusMap.computeIfAbsent(requestID, k -> new HashSet<>()).add(status);
            }

            // Determine color for each RequestID based on statuses
            Map<String, Color> requestIDColors = new HashMap<>();
            for (Map.Entry<String, Set<String>> entry : requestIDStatusMap.entrySet()) {
                Set<String> statuses = entry.getValue();
                if (statuses.contains("Fully Supplied")) {
                    requestIDColors.put(entry.getKey(), Color.GRAY); 
                } else if (statuses.contains("Suplied,Not Completely")) {
                    requestIDColors.put(entry.getKey(), Color.WHITE); 
                } else {
                    requestIDColors.put(entry.getKey(), Color.RED);
                }
            }

            return requestIDColors;
        }
    }

    public static class StatusCellRenderer extends DefaultTableCellRenderer {

        private final Map<String, Color> requestIDColors;

        public StatusCellRenderer(Map<String, Color> requestIDColors) {
            this.requestIDColors = requestIDColors;
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            String requestID = (String) table.getValueAt(row, 1); // Assuming RequestID is in column index 1

            Color color = requestIDColors.get(requestID);
            if (color != null) {
                cell.setBackground(color);
            } else {
                cell.setBackground(Color.WHITE); // Default color if no mapping found
            }

            return cell;
        }
    
    }                                    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        DefaultTableModel tblmodel = (DefaultTableModel)jTable1.getModel();
        String tblNIC = tblmodel.getValueAt(jTable1.getSelectedRow(),1).toString();
        String tblBgroup = tblmodel.getValueAt(jTable1.getSelectedRow(),2).toString();
        String tblamount = tblmodel.getValueAt(jTable1.getSelectedRow(),3).toString();
        txtreqid.setText(tblNIC);
        txtBgroup.setText(tblBgroup); 
        txtreqamount.setText(tblamount);
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddActionPerformed
         try
        {
             Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/bloodbank", "root", "");
            
            String SID = txtsupid.getText();
            String RID = txtreqid.getText();
            String Bgroup = txtBgroup.getText();
            String Ramount = txtreqamount.getText();
            Date date = txtsupdate.getDate();
          
            if(Supamount == null)
            {
            JOptionPane.showMessageDialog(null,"Select The Quantity");

            }
            else if(txtsupdate.getDate()== null)
            {
                JOptionPane.showMessageDialog(this,"Please Enter Date"  );
            }
             else if(RID.isEmpty())
            {
                JOptionPane.showMessageDialog(this,"Please Select RequestID"  );
            }
             else if(Status== null)
            {
                JOptionPane.showMessageDialog(this,"Please Add Status"  );
            }
            
         else{
                 
                 Statement st = con.createStatement();
                 String query1;
               
               query1 ="INSERT INTO internalsupply(ISupplyID,IRequestID,BloodGroup,SuppliedAmount,Date,Status)"  + "VALUES('"+SID+"','"+RID+"','"+Bgroup+"','"+Supamount+"','"+date+"','"+Status+"')";
               st.executeUpdate(query1);
                
               st.executeUpdate("Update Stock set Amount =Amount - '"+Supamount+"' where BloodGroup= '"+Bgroup+"' ");

               txtreqid.setText("");
               cbsupbamount.setSelectedIndex(0);
               txtsupid.setText("");
               txtsupdate.setDate(null);
                txtsupid.setText("");
                txtBgroup.setText("");
                txtreqamount.setText("");
                status.setSelectedIndex(0);
                JOptionPane.showMessageDialog(null,"Success");

             }
            
        }

           catch(Exception ex)
        {
          JOptionPane.showMessageDialog(null,ex);

        }
    }//GEN-LAST:event_btnaddActionPerformed

    private void cbsupbamountItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbsupbamountItemStateChanged
         Supamount = cbsupbamount.getSelectedItem().toString();
        
    }//GEN-LAST:event_cbsupbamountItemStateChanged

    private void statusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_statusItemStateChanged
        Status = status.getSelectedItem().toString();
        
    }//GEN-LAST:event_statusItemStateChanged

    private void txtsupidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsupidKeyPressed
      char Sid = evt.getKeyChar();
        if(Character.isLetter(Sid) || Character.isWhitespace(Sid)|| Character.isDigit(Sid)){
        txtsupid.setEditable(false);
        }
        else{
        txtsupid.setEditable(true);
        }
        
    }//GEN-LAST:event_txtsupidKeyPressed

    private void txtreqidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtreqidKeyPressed
        char Rid = evt.getKeyChar();
        if(Character.isLetter(Rid) || Character.isWhitespace(Rid)|| Character.isDigit(Rid)){
        txtreqid.setEditable(false);
        }
        else{
        txtreqid.setEditable(true);
        }
    }//GEN-LAST:event_txtreqidKeyPressed

    private void txtBgroupKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBgroupKeyPressed
        char Bgroup = evt.getKeyChar();
        if(Character.isLetter(Bgroup) || Character.isWhitespace(Bgroup)|| Character.isDigit(Bgroup)){
        txtBgroup.setEditable(false);
        }
        else{
        txtBgroup.setEditable(true);
        }
        
    }//GEN-LAST:event_txtBgroupKeyPressed

    private void txtreqamountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtreqamountKeyPressed
        char Ramount = evt.getKeyChar();
        if(Character.isLetter(Ramount) || Character.isWhitespace(Ramount)|| Character.isDigit(Ramount)){
        txtreqamount.setEditable(false);
        }
        else{
        txtreqamount.setEditable(true);
        }
        
    }//GEN-LAST:event_txtreqamountKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DonerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DonerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DonerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DonerDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DonerDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Externalsupply;
    private javax.swing.JMenu Internalsupply;
    private javax.swing.JMenu allsupplymenu;
    private javax.swing.JMenu backmenu;
    private javax.swing.JMenu bloodsupplymenu;
    private javax.swing.JButton btnadd;
    private javax.swing.JButton btnclear;
    private javax.swing.JComboBox<String> cbsupbamount;
    private javax.swing.JMenu externalsupply;
    private javax.swing.JMenu internalsupply;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblblgroup;
    private javax.swing.JLabel lblnewDoner;
    private javax.swing.JLabel lblreqbamount;
    private javax.swing.JLabel lblreqid;
    private javax.swing.JLabel lblstatus;
    private javax.swing.JLabel lblsupbamount;
    private javax.swing.JLabel lblsupdate;
    private javax.swing.JLabel lblsupid;
    private javax.swing.JPanel paneladd;
    private javax.swing.JComboBox<String> status;
    private javax.swing.JTextField txtBgroup;
    private javax.swing.JTextField txtreqamount;
    private javax.swing.JTextField txtreqid;
    private com.toedter.calendar.JDateChooser txtsupdate;
    private javax.swing.JTextField txtsupid;
    // End of variables declaration//GEN-END:variables
}
